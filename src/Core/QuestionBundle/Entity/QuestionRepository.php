<?php

namespace Core\QuestionBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * QuestionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class QuestionRepository extends EntityRepository
{
    
    public function getQuestionQuery(){
        
        $qb = $this->createQueryBuilder('a')
                   ->select('a, c','d', 'e','f')
                   ->leftJoin('a.section', 'c')
                   ->leftJoin('a.level', 'd')
                   ->leftJoin('a.type', 'e')
                   ->leftJoin('a.tags', 'f');
        
        return $qb;
        
    }
    
    public function getComments($qb){
        
        $qb->leftJoin('a.comments','g')
           ->add('orderBy', 'g.createdAt DESC');
           
        
        return $qb;
        
    }
    
    
    public function getQuestionQueryList(){
        
        $qb = $this->getQuestionQuery();
                   
        return $qb->getQuery();
        
    }
    
    public function findOneByTitleJoined($title)
    {
        
        $query = $this->getEntityManager()
            ->createQuery('
                SELECT p, c FROM CoreQuestionBundle:Question p
                JOIN p.answers c
                    WHERE p.title = :title'
            )->setParameter('title', $title);

        try {
            return $query->getSingleResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    
    public function getLevelColor($levels){
        
    }
    
    
    public function findByReviewerRole($languages){
        
        $qb = $this->getQuestionQuery();
        
        $qb->add('where', 'c.name IN (:names)')
           ->andWhere('a.status = :status')
           ->setParameters(array('names'=> $languages, 'status'=>  QuestionStatus::REVIEW));
        
        $qb = $this->getComments($qb);
        
        return $qb;
        
    }
    
    public function updateStatus($id, $status){
        
        $query = $this->getEntityManager()
                      ->createQuery(
                          'Update CoreQuestionBundle:Question p
                           SET p.status = :status
                           WHERE p.id = :id'
                      )->setParameters(array('status'=>$status, 'id'=>$id));
        
        return $query->getResult();        
    }
    
    public function updateStatusApproval($id, $user, $status){
        
        $query = $this->getEntityManager()
                      ->createQuery(
                          'Update CoreQuestionBundle:Question p
                           SET p.status = :status
                           WHERE p.id = :id AND p.user = :user'
                      )->setParameters(array('status'=>$status, 'id'=>$id, 'user'=>$user));
        
        return $query->getResult();        
    }
    
}